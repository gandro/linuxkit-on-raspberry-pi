version: 2.1

jobs:
  build_kernel:
    docker:
      - image: linuxkitrpi/linuxkit-cli
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-images-kernel
      - run:
          name: Restore Layers from Cache
          command: docker load -i /var/cache/layers/build.tar || true
      - run:
          name: Cross-Compile RaspberryPi Kernel
          command: |
            # cross compile kernel
            docker build -t rpi-kernel --build-arg "AARCH64_CROSS_COMPILE=1" pkg/kernel | tee -a build.log
            # fix manifest architecture
            LAYERS=$(mktemp -d "${TMPDIR:-/tmp}/layers.XXXXXXXXX")
            docker save rpi-kernel | tar -C "$LAYERS" -x
            find "$LAYERS" -type f \( -name 'json' -o -name '*.json' \) \
                -exec sed -i 's|\("architecture"\s*:\s*\)"amd64"|\1"arm64"|g' '{}' \;
            tar -C "$LAYERS" -c . | docker load
      - run:
          name: Tag and Save Kernel Image for Push Stage
          command: |
            TAG="$(linuxkit pkg show-tag pkg/kernel)"
            docker tag rpi-kernel "${TAG}"
            docker tag rpi-kernel "${TAG}-arm64"

            mkdir -p /run/images
            docker save -o /run/images/kernel.tar "${TAG}" "${TAG}-arm64"
      - persist_to_workspace:
          root: /run/images
          paths:
            - kernel.tar
      - run:
          name: Save Layers to Cache
          command: |
            IMAGES=""
            for i in $(sed -n 's/^ ---> \([[:xdigit:]]\+\)$/\1/p' build.log) ; do
              if [ "$(docker inspect --format '{{.Size}}' "$i")" -gt 0 ] ; then
                IMAGES="$IMAGES $i"
              fi
            done

            mkdir -p /var/cache/layers
            docker save -o "/var/cache/layers/build.tar" $IMAGES
      - save_cache:
          key: v1-images-kernel-{{ .BuildNum }}
          paths:
            - /var/cache/layers
  push:
    docker:
      - image: linuxkitrpi/linuxkit-cli
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /run/images
      - run:
          name: Restore Images from Workspace
          command: find /run/images -type f -name '*.tar' -exec docker load -i '{}' \;
      - run:
          name: Log in to Docker
          command: docker login -u "$DOCKER_LOGIN" -p "$DOCKER_PASSWORD"
      - run:
          name: Pushing Images
          command: |
            PKG="$(linuxkit pkg show-tag pkg/kernel)"
            push-manifest.sh "$PKG"

workflows:
  version: 2
  build_and_push:
    jobs:
      - build_kernel
      - push:
          requires:
            - build_kernel